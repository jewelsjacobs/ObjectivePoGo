// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Settings/Master/PlayerLevelSettings.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "PlayerLevelSettings.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PlayerLevelSettingsRoot

@implementation PlayerLevelSettingsRoot

@end

#pragma mark - PlayerLevelSettingsRoot_FileDescriptor

static GPBFileDescriptor *PlayerLevelSettingsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Settings.Master"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - PlayerLevelSettings

@implementation PlayerLevelSettings

@dynamic rankNumArray, rankNumArray_Count;
@dynamic requiredExperienceArray, requiredExperienceArray_Count;
@dynamic cpMultiplierArray, cpMultiplierArray_Count;
@dynamic maxEggPlayerLevel;
@dynamic maxEncounterPlayerLevel;

typedef struct PlayerLevelSettings__storage_ {
  uint32_t _has_storage_[1];
  int32_t maxEggPlayerLevel;
  int32_t maxEncounterPlayerLevel;
  GPBInt32Array *rankNumArray;
  GPBInt32Array *requiredExperienceArray;
  GPBFloatArray *cpMultiplierArray;
} PlayerLevelSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rankNumArray",
        .dataTypeSpecific.className = NULL,
        .number = PlayerLevelSettings_FieldNumber_RankNumArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PlayerLevelSettings__storage_, rankNumArray),
        .flags = GPBFieldRepeated | GPBFieldPacked,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "requiredExperienceArray",
        .dataTypeSpecific.className = NULL,
        .number = PlayerLevelSettings_FieldNumber_RequiredExperienceArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PlayerLevelSettings__storage_, requiredExperienceArray),
        .flags = GPBFieldRepeated | GPBFieldPacked,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cpMultiplierArray",
        .dataTypeSpecific.className = NULL,
        .number = PlayerLevelSettings_FieldNumber_CpMultiplierArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PlayerLevelSettings__storage_, cpMultiplierArray),
        .flags = GPBFieldRepeated | GPBFieldPacked,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "maxEggPlayerLevel",
        .dataTypeSpecific.className = NULL,
        .number = PlayerLevelSettings_FieldNumber_MaxEggPlayerLevel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PlayerLevelSettings__storage_, maxEggPlayerLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maxEncounterPlayerLevel",
        .dataTypeSpecific.className = NULL,
        .number = PlayerLevelSettings_FieldNumber_MaxEncounterPlayerLevel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PlayerLevelSettings__storage_, maxEncounterPlayerLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PlayerLevelSettings class]
                                     rootClass:[PlayerLevelSettingsRoot class]
                                          file:PlayerLevelSettingsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PlayerLevelSettings__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
