// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Settings/Master/ItemSettings.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "ItemSettings.pbobjc.h"
 #import "ItemCategory.pbobjc.h"
 #import "ItemId.pbobjc.h"
 #import "ItemType.pbobjc.h"
 #import "FoodAttributes.pbobjc.h"
 #import "PotionAttributes.pbobjc.h"
 #import "ReviveAttributes.pbobjc.h"
 #import "BattleAttributes.pbobjc.h"
 #import "IncenseAttributes.pbobjc.h"
 #import "PokeballAttributes.pbobjc.h"
 #import "FortModifierAttributes.pbobjc.h"
 #import "EggIncubatorAttributes.pbobjc.h"
 #import "ExperienceBoostAttributes.pbobjc.h"
 #import "InventoryUpgradeAttributes.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ItemSettingsRoot

@implementation ItemSettingsRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[ItemCategoryRoot extensionRegistry]];
    [registry addExtensions:[ItemIdRoot extensionRegistry]];
    [registry addExtensions:[ItemTypeRoot extensionRegistry]];
    [registry addExtensions:[FoodAttributesRoot extensionRegistry]];
    [registry addExtensions:[PotionAttributesRoot extensionRegistry]];
    [registry addExtensions:[ReviveAttributesRoot extensionRegistry]];
    [registry addExtensions:[BattleAttributesRoot extensionRegistry]];
    [registry addExtensions:[IncenseAttributesRoot extensionRegistry]];
    [registry addExtensions:[PokeballAttributesRoot extensionRegistry]];
    [registry addExtensions:[FortModifierAttributesRoot extensionRegistry]];
    [registry addExtensions:[EggIncubatorAttributesRoot extensionRegistry]];
    [registry addExtensions:[ExperienceBoostAttributesRoot extensionRegistry]];
    [registry addExtensions:[InventoryUpgradeAttributesRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - ItemSettingsRoot_FileDescriptor

static GPBFileDescriptor *ItemSettingsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Settings.Master"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ItemSettings

@implementation ItemSettings

@dynamic itemId;
@dynamic itemType;
@dynamic category;
@dynamic dropFreq;
@dynamic dropTrainerLevel;
@dynamic hasPokeball, pokeball;
@dynamic hasPotion, potion;
@dynamic hasRevive, revive;
@dynamic hasBattle, battle;
@dynamic hasFood, food;
@dynamic hasInventoryUpgrade, inventoryUpgrade;
@dynamic hasXpBoost, xpBoost;
@dynamic hasIncense, incense;
@dynamic hasEggIncubator, eggIncubator;
@dynamic hasFortModifier, fortModifier;

typedef struct ItemSettings__storage_ {
  uint32_t _has_storage_[1];
  ItemId itemId;
  ItemType itemType;
  ItemCategory category;
  float dropFreq;
  int32_t dropTrainerLevel;
  PokeballAttributes *pokeball;
  PotionAttributes *potion;
  ReviveAttributes *revive;
  BattleAttributes *battle;
  FoodAttributes *food;
  InventoryUpgradeAttributes *inventoryUpgrade;
  ExperienceBoostAttributes *xpBoost;
  IncenseAttributes *incense;
  EggIncubatorAttributes *eggIncubator;
  FortModifierAttributes *fortModifier;
} ItemSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemId",
        .dataTypeSpecific.enumDescFunc = ItemId_EnumDescriptor,
        .number = ItemSettings_FieldNumber_ItemId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, itemId),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "itemType",
        .dataTypeSpecific.enumDescFunc = ItemType_EnumDescriptor,
        .number = ItemSettings_FieldNumber_ItemType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, itemType),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "category",
        .dataTypeSpecific.enumDescFunc = ItemCategory_EnumDescriptor,
        .number = ItemSettings_FieldNumber_Category,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, category),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "dropFreq",
        .dataTypeSpecific.className = NULL,
        .number = ItemSettings_FieldNumber_DropFreq,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, dropFreq),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "dropTrainerLevel",
        .dataTypeSpecific.className = NULL,
        .number = ItemSettings_FieldNumber_DropTrainerLevel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, dropTrainerLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pokeball",
        .dataTypeSpecific.className = GPBStringifySymbol(PokeballAttributes),
        .number = ItemSettings_FieldNumber_Pokeball,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, pokeball),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "potion",
        .dataTypeSpecific.className = GPBStringifySymbol(PotionAttributes),
        .number = ItemSettings_FieldNumber_Potion,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, potion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "revive",
        .dataTypeSpecific.className = GPBStringifySymbol(ReviveAttributes),
        .number = ItemSettings_FieldNumber_Revive,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, revive),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "battle",
        .dataTypeSpecific.className = GPBStringifySymbol(BattleAttributes),
        .number = ItemSettings_FieldNumber_Battle,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, battle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "food",
        .dataTypeSpecific.className = GPBStringifySymbol(FoodAttributes),
        .number = ItemSettings_FieldNumber_Food,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, food),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "inventoryUpgrade",
        .dataTypeSpecific.className = GPBStringifySymbol(InventoryUpgradeAttributes),
        .number = ItemSettings_FieldNumber_InventoryUpgrade,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, inventoryUpgrade),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "xpBoost",
        .dataTypeSpecific.className = GPBStringifySymbol(ExperienceBoostAttributes),
        .number = ItemSettings_FieldNumber_XpBoost,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, xpBoost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "incense",
        .dataTypeSpecific.className = GPBStringifySymbol(IncenseAttributes),
        .number = ItemSettings_FieldNumber_Incense,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, incense),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "eggIncubator",
        .dataTypeSpecific.className = GPBStringifySymbol(EggIncubatorAttributes),
        .number = ItemSettings_FieldNumber_EggIncubator,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, eggIncubator),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fortModifier",
        .dataTypeSpecific.className = GPBStringifySymbol(FortModifierAttributes),
        .number = ItemSettings_FieldNumber_FortModifier,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, fortModifier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ItemSettings class]
                                     rootClass:[ItemSettingsRoot class]
                                          file:ItemSettingsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ItemSettings__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ItemSettings_ItemId_RawValue(ItemSettings *message) {
  GPBDescriptor *descriptor = [ItemSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ItemSettings_FieldNumber_ItemId];
  return GPBGetMessageInt32Field(message, field);
}

void SetItemSettings_ItemId_RawValue(ItemSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [ItemSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ItemSettings_FieldNumber_ItemId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t ItemSettings_ItemType_RawValue(ItemSettings *message) {
  GPBDescriptor *descriptor = [ItemSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ItemSettings_FieldNumber_ItemType];
  return GPBGetMessageInt32Field(message, field);
}

void SetItemSettings_ItemType_RawValue(ItemSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [ItemSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ItemSettings_FieldNumber_ItemType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t ItemSettings_Category_RawValue(ItemSettings *message) {
  GPBDescriptor *descriptor = [ItemSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ItemSettings_FieldNumber_Category];
  return GPBGetMessageInt32Field(message, field);
}

void SetItemSettings_Category_RawValue(ItemSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [ItemSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ItemSettings_FieldNumber_Category];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
