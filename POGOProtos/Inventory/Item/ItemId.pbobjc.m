// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Inventory/Item/ItemId.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "ItemId.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ItemIdRoot

@implementation ItemIdRoot

@end

#pragma mark - Enum ItemId

GPBEnumDescriptor *ItemId_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "ItemUnknown\000ItemPokeBall\000ItemGreatBall\000I"
        "temUltraBall\000ItemMasterBall\000ItemPotion\000I"
        "temSuperPotion\000ItemHyperPotion\000ItemMaxPo"
        "tion\000ItemRevive\000ItemMaxRevive\000ItemLuckyE"
        "gg\000ItemIncenseOrdinary\000ItemIncenseSpicy\000"
        "ItemIncenseCool\000ItemIncenseFloral\000ItemTr"
        "oyDisk\000ItemXAttack\000ItemXDefense\000ItemXMir"
        "acle\000ItemRazzBerry\000ItemBlukBerry\000ItemNan"
        "abBerry\000ItemWeparBerry\000ItemPinapBerry\000It"
        "emSpecialCamera\000ItemIncubatorBasicUnlimi"
        "ted\000ItemIncubatorBasic\000ItemPokemonStorag"
        "eUpgrade\000ItemItemStorageUpgrade\000";
    static const int32_t values[] = {
        ItemId_ItemUnknown,
        ItemId_ItemPokeBall,
        ItemId_ItemGreatBall,
        ItemId_ItemUltraBall,
        ItemId_ItemMasterBall,
        ItemId_ItemPotion,
        ItemId_ItemSuperPotion,
        ItemId_ItemHyperPotion,
        ItemId_ItemMaxPotion,
        ItemId_ItemRevive,
        ItemId_ItemMaxRevive,
        ItemId_ItemLuckyEgg,
        ItemId_ItemIncenseOrdinary,
        ItemId_ItemIncenseSpicy,
        ItemId_ItemIncenseCool,
        ItemId_ItemIncenseFloral,
        ItemId_ItemTroyDisk,
        ItemId_ItemXAttack,
        ItemId_ItemXDefense,
        ItemId_ItemXMiracle,
        ItemId_ItemRazzBerry,
        ItemId_ItemBlukBerry,
        ItemId_ItemNanabBerry,
        ItemId_ItemWeparBerry,
        ItemId_ItemPinapBerry,
        ItemId_ItemSpecialCamera,
        ItemId_ItemIncubatorBasicUnlimited,
        ItemId_ItemIncubatorBasic,
        ItemId_ItemPokemonStorageUpgrade,
        ItemId_ItemItemStorageUpgrade,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ItemId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ItemId_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ItemId_IsValidValue(int32_t value__) {
  switch (value__) {
    case ItemId_ItemUnknown:
    case ItemId_ItemPokeBall:
    case ItemId_ItemGreatBall:
    case ItemId_ItemUltraBall:
    case ItemId_ItemMasterBall:
    case ItemId_ItemPotion:
    case ItemId_ItemSuperPotion:
    case ItemId_ItemHyperPotion:
    case ItemId_ItemMaxPotion:
    case ItemId_ItemRevive:
    case ItemId_ItemMaxRevive:
    case ItemId_ItemLuckyEgg:
    case ItemId_ItemIncenseOrdinary:
    case ItemId_ItemIncenseSpicy:
    case ItemId_ItemIncenseCool:
    case ItemId_ItemIncenseFloral:
    case ItemId_ItemTroyDisk:
    case ItemId_ItemXAttack:
    case ItemId_ItemXDefense:
    case ItemId_ItemXMiracle:
    case ItemId_ItemRazzBerry:
    case ItemId_ItemBlukBerry:
    case ItemId_ItemNanabBerry:
    case ItemId_ItemWeparBerry:
    case ItemId_ItemPinapBerry:
    case ItemId_ItemSpecialCamera:
    case ItemId_ItemIncubatorBasicUnlimited:
    case ItemId_ItemIncubatorBasic:
    case ItemId_ItemPokemonStorageUpgrade:
    case ItemId_ItemItemStorageUpgrade:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
