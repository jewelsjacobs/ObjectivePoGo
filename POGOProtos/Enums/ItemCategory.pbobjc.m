// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Enums/ItemCategory.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "ItemCategory.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ItemCategoryRoot

@implementation ItemCategoryRoot

@end

#pragma mark - Enum ItemCategory

GPBEnumDescriptor *ItemCategory_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "ItemCategoryNone\000ItemCategoryPokeball\000It"
        "emCategoryFood\000ItemCategoryMedicine\000Item"
        "CategoryBoost\000ItemCategoryUtilites\000ItemC"
        "ategoryCamera\000ItemCategoryDisk\000ItemCateg"
        "oryIncubator\000ItemCategoryIncense\000ItemCat"
        "egoryXpBoost\000ItemCategoryInventoryUpgrad"
        "e\000";
    static const int32_t values[] = {
        ItemCategory_ItemCategoryNone,
        ItemCategory_ItemCategoryPokeball,
        ItemCategory_ItemCategoryFood,
        ItemCategory_ItemCategoryMedicine,
        ItemCategory_ItemCategoryBoost,
        ItemCategory_ItemCategoryUtilites,
        ItemCategory_ItemCategoryCamera,
        ItemCategory_ItemCategoryDisk,
        ItemCategory_ItemCategoryIncubator,
        ItemCategory_ItemCategoryIncense,
        ItemCategory_ItemCategoryXpBoost,
        ItemCategory_ItemCategoryInventoryUpgrade,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ItemCategory)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ItemCategory_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ItemCategory_IsValidValue(int32_t value__) {
  switch (value__) {
    case ItemCategory_ItemCategoryNone:
    case ItemCategory_ItemCategoryPokeball:
    case ItemCategory_ItemCategoryFood:
    case ItemCategory_ItemCategoryMedicine:
    case ItemCategory_ItemCategoryBoost:
    case ItemCategory_ItemCategoryUtilites:
    case ItemCategory_ItemCategoryCamera:
    case ItemCategory_ItemCategoryDisk:
    case ItemCategory_ItemCategoryIncubator:
    case ItemCategory_ItemCategoryIncense:
    case ItemCategory_ItemCategoryXpBoost:
    case ItemCategory_ItemCategoryInventoryUpgrade:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
