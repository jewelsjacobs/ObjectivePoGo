// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Enums/ItemEffect.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "ItemEffect.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ItemEffectRoot

@implementation ItemEffectRoot

@end

#pragma mark - Enum ItemEffect

GPBEnumDescriptor *ItemEffect_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "ItemEffectNone\000ItemEffectCapNoFlee\000ItemE"
        "ffectCapNoMovement\000ItemEffectCapNoThreat"
        "\000ItemEffectCapTargetMax\000ItemEffectCapTar"
        "getSlow\000ItemEffectCapChanceNight\000ItemEff"
        "ectCapChanceTrainer\000ItemEffectCapChanceF"
        "irstThrow\000ItemEffectCapChanceLegend\000Item"
        "EffectCapChanceHeavy\000ItemEffectCapChance"
        "Repeat\000ItemEffectCapChanceMultiThrow\000Ite"
        "mEffectCapChanceAlways\000ItemEffectCapChan"
        "ceSingleThrow\000";
    static const int32_t values[] = {
        ItemEffect_ItemEffectNone,
        ItemEffect_ItemEffectCapNoFlee,
        ItemEffect_ItemEffectCapNoMovement,
        ItemEffect_ItemEffectCapNoThreat,
        ItemEffect_ItemEffectCapTargetMax,
        ItemEffect_ItemEffectCapTargetSlow,
        ItemEffect_ItemEffectCapChanceNight,
        ItemEffect_ItemEffectCapChanceTrainer,
        ItemEffect_ItemEffectCapChanceFirstThrow,
        ItemEffect_ItemEffectCapChanceLegend,
        ItemEffect_ItemEffectCapChanceHeavy,
        ItemEffect_ItemEffectCapChanceRepeat,
        ItemEffect_ItemEffectCapChanceMultiThrow,
        ItemEffect_ItemEffectCapChanceAlways,
        ItemEffect_ItemEffectCapChanceSingleThrow,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ItemEffect)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ItemEffect_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ItemEffect_IsValidValue(int32_t value__) {
  switch (value__) {
    case ItemEffect_ItemEffectNone:
    case ItemEffect_ItemEffectCapNoFlee:
    case ItemEffect_ItemEffectCapNoMovement:
    case ItemEffect_ItemEffectCapNoThreat:
    case ItemEffect_ItemEffectCapTargetMax:
    case ItemEffect_ItemEffectCapTargetSlow:
    case ItemEffect_ItemEffectCapChanceNight:
    case ItemEffect_ItemEffectCapChanceTrainer:
    case ItemEffect_ItemEffectCapChanceFirstThrow:
    case ItemEffect_ItemEffectCapChanceLegend:
    case ItemEffect_ItemEffectCapChanceHeavy:
    case ItemEffect_ItemEffectCapChanceRepeat:
    case ItemEffect_ItemEffectCapChanceMultiThrow:
    case ItemEffect_ItemEffectCapChanceAlways:
    case ItemEffect_ItemEffectCapChanceSingleThrow:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
