// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Enums/PokemonType.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "PokemonType.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PokemonTypeRoot

@implementation PokemonTypeRoot

@end

#pragma mark - Enum PokemonType

GPBEnumDescriptor *PokemonType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "PokemonTypeNone\000PokemonTypeNormal\000Pokemo"
        "nTypeFighting\000PokemonTypeFlying\000PokemonT"
        "ypePoison\000PokemonTypeGround\000PokemonTypeR"
        "ock\000PokemonTypeBug\000PokemonTypeGhost\000Poke"
        "monTypeSteel\000PokemonTypeFire\000PokemonType"
        "Water\000PokemonTypeGrass\000PokemonTypeElectr"
        "ic\000PokemonTypePsychic\000PokemonTypeIce\000Pok"
        "emonTypeDragon\000PokemonTypeDark\000PokemonTy"
        "peFairy\000";
    static const int32_t values[] = {
        PokemonType_PokemonTypeNone,
        PokemonType_PokemonTypeNormal,
        PokemonType_PokemonTypeFighting,
        PokemonType_PokemonTypeFlying,
        PokemonType_PokemonTypePoison,
        PokemonType_PokemonTypeGround,
        PokemonType_PokemonTypeRock,
        PokemonType_PokemonTypeBug,
        PokemonType_PokemonTypeGhost,
        PokemonType_PokemonTypeSteel,
        PokemonType_PokemonTypeFire,
        PokemonType_PokemonTypeWater,
        PokemonType_PokemonTypeGrass,
        PokemonType_PokemonTypeElectric,
        PokemonType_PokemonTypePsychic,
        PokemonType_PokemonTypeIce,
        PokemonType_PokemonTypeDragon,
        PokemonType_PokemonTypeDark,
        PokemonType_PokemonTypeFairy,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PokemonType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PokemonType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PokemonType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PokemonType_PokemonTypeNone:
    case PokemonType_PokemonTypeNormal:
    case PokemonType_PokemonTypeFighting:
    case PokemonType_PokemonTypeFlying:
    case PokemonType_PokemonTypePoison:
    case PokemonType_PokemonTypeGround:
    case PokemonType_PokemonTypeRock:
    case PokemonType_PokemonTypeBug:
    case PokemonType_PokemonTypeGhost:
    case PokemonType_PokemonTypeSteel:
    case PokemonType_PokemonTypeFire:
    case PokemonType_PokemonTypeWater:
    case PokemonType_PokemonTypeGrass:
    case PokemonType_PokemonTypeElectric:
    case PokemonType_PokemonTypePsychic:
    case PokemonType_PokemonTypeIce:
    case PokemonType_PokemonTypeDragon:
    case PokemonType_PokemonTypeDark:
    case PokemonType_PokemonTypeFairy:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
