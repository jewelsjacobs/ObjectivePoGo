// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Enums/BadgeType.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "BadgeType.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - BadgeTypeRoot

@implementation BadgeTypeRoot

@end

#pragma mark - Enum BadgeType

GPBEnumDescriptor *BadgeType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "BadgeUnset\000BadgeTravelKm\000BadgePokedexEnt"
        "ries\000BadgeCaptureTotal\000BadgeDefeatedFort"
        "\000BadgeEvolvedTotal\000BadgeHatchedTotal\000Bad"
        "geEncounteredTotal\000BadgePokestopsVisited"
        "\000BadgeUniquePokestops\000BadgePokeballThrow"
        "n\000BadgeBigMagikarp\000BadgeDeployedTotal\000Ba"
        "dgeBattleAttackWon\000BadgeBattleTrainingWo"
        "n\000BadgeBattleDefendWon\000BadgePrestigeRais"
        "ed\000BadgePrestigeDropped\000BadgeTypeNormal\000"
        "BadgeTypeFighting\000BadgeTypeFlying\000BadgeT"
        "ypePoison\000BadgeTypeGround\000BadgeTypeRock\000"
        "BadgeTypeBug\000BadgeTypeGhost\000BadgeTypeSte"
        "el\000BadgeTypeFire\000BadgeTypeWater\000BadgeTyp"
        "eGrass\000BadgeTypeElectric\000BadgeTypePsychi"
        "c\000BadgeTypeIce\000BadgeTypeDragon\000BadgeType"
        "Dark\000BadgeTypeFairy\000BadgeSmallRattata\000Ba"
        "dgePikachu\000";
    static const int32_t values[] = {
        BadgeType_BadgeUnset,
        BadgeType_BadgeTravelKm,
        BadgeType_BadgePokedexEntries,
        BadgeType_BadgeCaptureTotal,
        BadgeType_BadgeDefeatedFort,
        BadgeType_BadgeEvolvedTotal,
        BadgeType_BadgeHatchedTotal,
        BadgeType_BadgeEncounteredTotal,
        BadgeType_BadgePokestopsVisited,
        BadgeType_BadgeUniquePokestops,
        BadgeType_BadgePokeballThrown,
        BadgeType_BadgeBigMagikarp,
        BadgeType_BadgeDeployedTotal,
        BadgeType_BadgeBattleAttackWon,
        BadgeType_BadgeBattleTrainingWon,
        BadgeType_BadgeBattleDefendWon,
        BadgeType_BadgePrestigeRaised,
        BadgeType_BadgePrestigeDropped,
        BadgeType_BadgeTypeNormal,
        BadgeType_BadgeTypeFighting,
        BadgeType_BadgeTypeFlying,
        BadgeType_BadgeTypePoison,
        BadgeType_BadgeTypeGround,
        BadgeType_BadgeTypeRock,
        BadgeType_BadgeTypeBug,
        BadgeType_BadgeTypeGhost,
        BadgeType_BadgeTypeSteel,
        BadgeType_BadgeTypeFire,
        BadgeType_BadgeTypeWater,
        BadgeType_BadgeTypeGrass,
        BadgeType_BadgeTypeElectric,
        BadgeType_BadgeTypePsychic,
        BadgeType_BadgeTypeIce,
        BadgeType_BadgeTypeDragon,
        BadgeType_BadgeTypeDark,
        BadgeType_BadgeTypeFairy,
        BadgeType_BadgeSmallRattata,
        BadgeType_BadgePikachu,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(BadgeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:BadgeType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL BadgeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case BadgeType_BadgeUnset:
    case BadgeType_BadgeTravelKm:
    case BadgeType_BadgePokedexEntries:
    case BadgeType_BadgeCaptureTotal:
    case BadgeType_BadgeDefeatedFort:
    case BadgeType_BadgeEvolvedTotal:
    case BadgeType_BadgeHatchedTotal:
    case BadgeType_BadgeEncounteredTotal:
    case BadgeType_BadgePokestopsVisited:
    case BadgeType_BadgeUniquePokestops:
    case BadgeType_BadgePokeballThrown:
    case BadgeType_BadgeBigMagikarp:
    case BadgeType_BadgeDeployedTotal:
    case BadgeType_BadgeBattleAttackWon:
    case BadgeType_BadgeBattleTrainingWon:
    case BadgeType_BadgeBattleDefendWon:
    case BadgeType_BadgePrestigeRaised:
    case BadgeType_BadgePrestigeDropped:
    case BadgeType_BadgeTypeNormal:
    case BadgeType_BadgeTypeFighting:
    case BadgeType_BadgeTypeFlying:
    case BadgeType_BadgeTypePoison:
    case BadgeType_BadgeTypeGround:
    case BadgeType_BadgeTypeRock:
    case BadgeType_BadgeTypeBug:
    case BadgeType_BadgeTypeGhost:
    case BadgeType_BadgeTypeSteel:
    case BadgeType_BadgeTypeFire:
    case BadgeType_BadgeTypeWater:
    case BadgeType_BadgeTypeGrass:
    case BadgeType_BadgeTypeElectric:
    case BadgeType_BadgeTypePsychic:
    case BadgeType_BadgeTypeIce:
    case BadgeType_BadgeTypeDragon:
    case BadgeType_BadgeTypeDark:
    case BadgeType_BadgeTypeFairy:
    case BadgeType_BadgeSmallRattata:
    case BadgeType_BadgePikachu:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
