// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Responses/CatchPokemonResponse.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "CatchPokemonResponse.pbobjc.h"
 #import "CaptureAward.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CatchPokemonResponseRoot

@implementation CatchPokemonResponseRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[CaptureAwardRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - CatchPokemonResponseRoot_FileDescriptor

static GPBFileDescriptor *CatchPokemonResponseRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Networking.Responses"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - CatchPokemonResponse

@implementation CatchPokemonResponse

@dynamic status;
@dynamic missPercent;
@dynamic capturedPokemonId;
@dynamic hasCaptureAward, captureAward;

typedef struct CatchPokemonResponse__storage_ {
  uint32_t _has_storage_[1];
  CatchPokemonResponse_CatchStatus status;
  CaptureAward *captureAward;
  double missPercent;
  uint64_t capturedPokemonId;
} CatchPokemonResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = CatchPokemonResponse_CatchStatus_EnumDescriptor,
        .number = CatchPokemonResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CatchPokemonResponse__storage_, status),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "missPercent",
        .dataTypeSpecific.className = NULL,
        .number = CatchPokemonResponse_FieldNumber_MissPercent,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CatchPokemonResponse__storage_, missPercent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "capturedPokemonId",
        .dataTypeSpecific.className = NULL,
        .number = CatchPokemonResponse_FieldNumber_CapturedPokemonId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CatchPokemonResponse__storage_, capturedPokemonId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed64,
      },
      {
        .name = "captureAward",
        .dataTypeSpecific.className = GPBStringifySymbol(CaptureAward),
        .number = CatchPokemonResponse_FieldNumber_CaptureAward,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CatchPokemonResponse__storage_, captureAward),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CatchPokemonResponse class]
                                     rootClass:[CatchPokemonResponseRoot class]
                                          file:CatchPokemonResponseRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CatchPokemonResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CatchPokemonResponse_Status_RawValue(CatchPokemonResponse *message) {
  GPBDescriptor *descriptor = [CatchPokemonResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CatchPokemonResponse_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetCatchPokemonResponse_Status_RawValue(CatchPokemonResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [CatchPokemonResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CatchPokemonResponse_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum CatchPokemonResponse_CatchStatus

GPBEnumDescriptor *CatchPokemonResponse_CatchStatus_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "CatchError\000CatchSuccess\000CatchEscape\000Catc"
        "hFlee\000CatchMissed\000";
    static const int32_t values[] = {
        CatchPokemonResponse_CatchStatus_CatchError,
        CatchPokemonResponse_CatchStatus_CatchSuccess,
        CatchPokemonResponse_CatchStatus_CatchEscape,
        CatchPokemonResponse_CatchStatus_CatchFlee,
        CatchPokemonResponse_CatchStatus_CatchMissed,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CatchPokemonResponse_CatchStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CatchPokemonResponse_CatchStatus_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CatchPokemonResponse_CatchStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case CatchPokemonResponse_CatchStatus_CatchError:
    case CatchPokemonResponse_CatchStatus_CatchSuccess:
    case CatchPokemonResponse_CatchStatus_CatchEscape:
    case CatchPokemonResponse_CatchStatus_CatchFlee:
    case CatchPokemonResponse_CatchStatus_CatchMissed:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
