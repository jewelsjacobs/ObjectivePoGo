// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Responses/EncounterResponse.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "EncounterResponse.pbobjc.h"
 #import "CaptureProbability.pbobjc.h"
 #import "WildPokemon.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - EncounterResponseRoot

@implementation EncounterResponseRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[CaptureProbabilityRoot extensionRegistry]];
    [registry addExtensions:[WildPokemonRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - EncounterResponseRoot_FileDescriptor

static GPBFileDescriptor *EncounterResponseRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Networking.Responses"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - EncounterResponse

@implementation EncounterResponse

@dynamic hasWildPokemon, wildPokemon;
@dynamic background;
@dynamic status;
@dynamic hasCaptureProbability, captureProbability;

typedef struct EncounterResponse__storage_ {
  uint32_t _has_storage_[1];
  EncounterResponse_Background background;
  EncounterResponse_Status status;
  WildPokemon *wildPokemon;
  CaptureProbability *captureProbability;
} EncounterResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "wildPokemon",
        .dataTypeSpecific.className = GPBStringifySymbol(WildPokemon),
        .number = EncounterResponse_FieldNumber_WildPokemon,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EncounterResponse__storage_, wildPokemon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "background",
        .dataTypeSpecific.enumDescFunc = EncounterResponse_Background_EnumDescriptor,
        .number = EncounterResponse_FieldNumber_Background,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EncounterResponse__storage_, background),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = EncounterResponse_Status_EnumDescriptor,
        .number = EncounterResponse_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EncounterResponse__storage_, status),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "captureProbability",
        .dataTypeSpecific.className = GPBStringifySymbol(CaptureProbability),
        .number = EncounterResponse_FieldNumber_CaptureProbability,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EncounterResponse__storage_, captureProbability),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EncounterResponse class]
                                     rootClass:[EncounterResponseRoot class]
                                          file:EncounterResponseRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EncounterResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t EncounterResponse_Background_RawValue(EncounterResponse *message) {
  GPBDescriptor *descriptor = [EncounterResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EncounterResponse_FieldNumber_Background];
  return GPBGetMessageInt32Field(message, field);
}

void SetEncounterResponse_Background_RawValue(EncounterResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [EncounterResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EncounterResponse_FieldNumber_Background];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t EncounterResponse_Status_RawValue(EncounterResponse *message) {
  GPBDescriptor *descriptor = [EncounterResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EncounterResponse_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetEncounterResponse_Status_RawValue(EncounterResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [EncounterResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EncounterResponse_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum EncounterResponse_Background

GPBEnumDescriptor *EncounterResponse_Background_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Park\000Desert\000";
    static const int32_t values[] = {
        EncounterResponse_Background_Park,
        EncounterResponse_Background_Desert,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(EncounterResponse_Background)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:EncounterResponse_Background_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL EncounterResponse_Background_IsValidValue(int32_t value__) {
  switch (value__) {
    case EncounterResponse_Background_Park:
    case EncounterResponse_Background_Desert:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum EncounterResponse_Status

GPBEnumDescriptor *EncounterResponse_Status_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "EncounterError\000EncounterSuccess\000Encounte"
        "rNotFound\000EncounterClosed\000EncounterPokem"
        "onFled\000EncounterNotInRange\000EncounterAlre"
        "adyHappened\000PokemonInventoryFull\000";
    static const int32_t values[] = {
        EncounterResponse_Status_EncounterError,
        EncounterResponse_Status_EncounterSuccess,
        EncounterResponse_Status_EncounterNotFound,
        EncounterResponse_Status_EncounterClosed,
        EncounterResponse_Status_EncounterPokemonFled,
        EncounterResponse_Status_EncounterNotInRange,
        EncounterResponse_Status_EncounterAlreadyHappened,
        EncounterResponse_Status_PokemonInventoryFull,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(EncounterResponse_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:EncounterResponse_Status_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL EncounterResponse_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case EncounterResponse_Status_EncounterError:
    case EncounterResponse_Status_EncounterSuccess:
    case EncounterResponse_Status_EncounterNotFound:
    case EncounterResponse_Status_EncounterClosed:
    case EncounterResponse_Status_EncounterPokemonFled:
    case EncounterResponse_Status_EncounterNotInRange:
    case EncounterResponse_Status_EncounterAlreadyHappened:
    case EncounterResponse_Status_PokemonInventoryFull:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
