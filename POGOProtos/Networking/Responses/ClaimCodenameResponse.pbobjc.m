// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Responses/ClaimCodenameResponse.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "ClaimCodenameResponse.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ClaimCodenameResponseRoot

@implementation ClaimCodenameResponseRoot

@end

#pragma mark - ClaimCodenameResponseRoot_FileDescriptor

static GPBFileDescriptor *ClaimCodenameResponseRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Networking.Responses"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ClaimCodenameResponse

@implementation ClaimCodenameResponse

@dynamic codename;
@dynamic userMessage;
@dynamic isAssignable;
@dynamic status;

typedef struct ClaimCodenameResponse__storage_ {
  uint32_t _has_storage_[1];
  ClaimCodenameResponse_Status status;
  NSString *codename;
  NSString *userMessage;
} ClaimCodenameResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "codename",
        .dataTypeSpecific.className = NULL,
        .number = ClaimCodenameResponse_FieldNumber_Codename,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ClaimCodenameResponse__storage_, codename),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userMessage",
        .dataTypeSpecific.className = NULL,
        .number = ClaimCodenameResponse_FieldNumber_UserMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ClaimCodenameResponse__storage_, userMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isAssignable",
        .dataTypeSpecific.className = NULL,
        .number = ClaimCodenameResponse_FieldNumber_IsAssignable,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = ClaimCodenameResponse_Status_EnumDescriptor,
        .number = ClaimCodenameResponse_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ClaimCodenameResponse__storage_, status),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ClaimCodenameResponse class]
                                     rootClass:[ClaimCodenameResponseRoot class]
                                          file:ClaimCodenameResponseRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClaimCodenameResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ClaimCodenameResponse_Status_RawValue(ClaimCodenameResponse *message) {
  GPBDescriptor *descriptor = [ClaimCodenameResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ClaimCodenameResponse_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetClaimCodenameResponse_Status_RawValue(ClaimCodenameResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [ClaimCodenameResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ClaimCodenameResponse_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum ClaimCodenameResponse_Status

GPBEnumDescriptor *ClaimCodenameResponse_Status_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unset\000Success\000CodenameNotAvailable\000Coden"
        "ameNotValid\000CurrentOwner\000CodenameChangeN"
        "otAllowed\000";
    static const int32_t values[] = {
        ClaimCodenameResponse_Status_Unset,
        ClaimCodenameResponse_Status_Success,
        ClaimCodenameResponse_Status_CodenameNotAvailable,
        ClaimCodenameResponse_Status_CodenameNotValid,
        ClaimCodenameResponse_Status_CurrentOwner,
        ClaimCodenameResponse_Status_CodenameChangeNotAllowed,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ClaimCodenameResponse_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ClaimCodenameResponse_Status_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ClaimCodenameResponse_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case ClaimCodenameResponse_Status_Unset:
    case ClaimCodenameResponse_Status_Success:
    case ClaimCodenameResponse_Status_CodenameNotAvailable:
    case ClaimCodenameResponse_Status_CodenameNotValid:
    case ClaimCodenameResponse_Status_CurrentOwner:
    case ClaimCodenameResponse_Status_CodenameChangeNotAllowed:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
