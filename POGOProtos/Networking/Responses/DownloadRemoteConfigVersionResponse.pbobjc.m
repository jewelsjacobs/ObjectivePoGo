// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Responses/DownloadRemoteConfigVersionResponse.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "DownloadRemoteConfigVersionResponse.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - DownloadRemoteConfigVersionResponseRoot

@implementation DownloadRemoteConfigVersionResponseRoot

@end

#pragma mark - DownloadRemoteConfigVersionResponseRoot_FileDescriptor

static GPBFileDescriptor *DownloadRemoteConfigVersionResponseRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Networking.Responses"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - DownloadRemoteConfigVersionResponse

@implementation DownloadRemoteConfigVersionResponse

@dynamic result;
@dynamic itemTemplatesTimestampMs;
@dynamic assetDigestTimestampMs;

typedef struct DownloadRemoteConfigVersionResponse__storage_ {
  uint32_t _has_storage_[1];
  DownloadRemoteConfigVersionResponse_Result result;
  uint64_t itemTemplatesTimestampMs;
  uint64_t assetDigestTimestampMs;
} DownloadRemoteConfigVersionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = DownloadRemoteConfigVersionResponse_Result_EnumDescriptor,
        .number = DownloadRemoteConfigVersionResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DownloadRemoteConfigVersionResponse__storage_, result),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "itemTemplatesTimestampMs",
        .dataTypeSpecific.className = NULL,
        .number = DownloadRemoteConfigVersionResponse_FieldNumber_ItemTemplatesTimestampMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DownloadRemoteConfigVersionResponse__storage_, itemTemplatesTimestampMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "assetDigestTimestampMs",
        .dataTypeSpecific.className = NULL,
        .number = DownloadRemoteConfigVersionResponse_FieldNumber_AssetDigestTimestampMs,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DownloadRemoteConfigVersionResponse__storage_, assetDigestTimestampMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DownloadRemoteConfigVersionResponse class]
                                     rootClass:[DownloadRemoteConfigVersionResponseRoot class]
                                          file:DownloadRemoteConfigVersionResponseRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DownloadRemoteConfigVersionResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DownloadRemoteConfigVersionResponse_Result_RawValue(DownloadRemoteConfigVersionResponse *message) {
  GPBDescriptor *descriptor = [DownloadRemoteConfigVersionResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DownloadRemoteConfigVersionResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetDownloadRemoteConfigVersionResponse_Result_RawValue(DownloadRemoteConfigVersionResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [DownloadRemoteConfigVersionResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DownloadRemoteConfigVersionResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum DownloadRemoteConfigVersionResponse_Result

GPBEnumDescriptor *DownloadRemoteConfigVersionResponse_Result_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unset\000Success\000";
    static const int32_t values[] = {
        DownloadRemoteConfigVersionResponse_Result_Unset,
        DownloadRemoteConfigVersionResponse_Result_Success,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DownloadRemoteConfigVersionResponse_Result)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DownloadRemoteConfigVersionResponse_Result_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DownloadRemoteConfigVersionResponse_Result_IsValidValue(int32_t value__) {
  switch (value__) {
    case DownloadRemoteConfigVersionResponse_Result_Unset:
    case DownloadRemoteConfigVersionResponse_Result_Success:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
