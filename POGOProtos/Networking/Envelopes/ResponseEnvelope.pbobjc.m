// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ResponseEnvelope.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "ResponseEnvelope.pbobjc.h"
 #import "AuthTicket.pbobjc.h"
 #import "Unknown6Response.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ResponseEnvelopeRoot

@implementation ResponseEnvelopeRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[AuthTicketRoot extensionRegistry]];
    [registry addExtensions:[Unknown6ResponseRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - ResponseEnvelopeRoot_FileDescriptor

static GPBFileDescriptor *ResponseEnvelopeRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Networking.Envelopes"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ResponseEnvelope

@implementation ResponseEnvelope

@dynamic statusCode;
@dynamic requestId;
@dynamic apiURL;
@dynamic unknown6Array, unknown6Array_Count;
@dynamic hasAuthTicket, authTicket;
@dynamic returnsArray, returnsArray_Count;
@dynamic error;

typedef struct ResponseEnvelope__storage_ {
  uint32_t _has_storage_[1];
  int32_t statusCode;
  NSString *apiURL;
  NSMutableArray *unknown6Array;
  AuthTicket *authTicket;
  NSMutableArray *returnsArray;
  NSString *error;
  uint64_t requestId;
} ResponseEnvelope__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "statusCode",
        .dataTypeSpecific.className = NULL,
        .number = ResponseEnvelope_FieldNumber_StatusCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseEnvelope__storage_, statusCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "requestId",
        .dataTypeSpecific.className = NULL,
        .number = ResponseEnvelope_FieldNumber_RequestId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ResponseEnvelope__storage_, requestId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "apiURL",
        .dataTypeSpecific.className = NULL,
        .number = ResponseEnvelope_FieldNumber_ApiURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ResponseEnvelope__storage_, apiURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "unknown6Array",
        .dataTypeSpecific.className = GPBStringifySymbol(Unknown6Response),
        .number = ResponseEnvelope_FieldNumber_Unknown6Array,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseEnvelope__storage_, unknown6Array),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "authTicket",
        .dataTypeSpecific.className = GPBStringifySymbol(AuthTicket),
        .number = ResponseEnvelope_FieldNumber_AuthTicket,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ResponseEnvelope__storage_, authTicket),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "returnsArray",
        .dataTypeSpecific.className = NULL,
        .number = ResponseEnvelope_FieldNumber_ReturnsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ResponseEnvelope__storage_, returnsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "error",
        .dataTypeSpecific.className = NULL,
        .number = ResponseEnvelope_FieldNumber_Error,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ResponseEnvelope__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseEnvelope class]
                                     rootClass:[ResponseEnvelopeRoot class]
                                          file:ResponseEnvelopeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseEnvelope__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\003\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResponseEnvelope_Unknown7

@implementation ResponseEnvelope_Unknown7

@dynamic unknown71;
@dynamic unknown72;
@dynamic unknown73;

typedef struct ResponseEnvelope_Unknown7__storage_ {
  uint32_t _has_storage_[1];
  NSData *unknown71;
  NSData *unknown73;
  int64_t unknown72;
} ResponseEnvelope_Unknown7__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "unknown71",
        .dataTypeSpecific.className = NULL,
        .number = ResponseEnvelope_Unknown7_FieldNumber_Unknown71,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResponseEnvelope_Unknown7__storage_, unknown71),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "unknown72",
        .dataTypeSpecific.className = NULL,
        .number = ResponseEnvelope_Unknown7_FieldNumber_Unknown72,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ResponseEnvelope_Unknown7__storage_, unknown72),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "unknown73",
        .dataTypeSpecific.className = NULL,
        .number = ResponseEnvelope_Unknown7_FieldNumber_Unknown73,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ResponseEnvelope_Unknown7__storage_, unknown73),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResponseEnvelope_Unknown7 class]
                                     rootClass:[ResponseEnvelopeRoot class]
                                          file:ResponseEnvelopeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResponseEnvelope_Unknown7__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
